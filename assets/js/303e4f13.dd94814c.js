"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[832],{6880:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=o(4848),t=o(8453);const a={},r="Organization",s={id:"organization",title:"Organization",description:"By default, this plugin will populate organizationName, organizationEmail and organizationHomepage with information from repository's organization. However, there are other scenarios...",source:"@site/target/mdoc/organization.md",sourceDirName:".",slug:"/organization",permalink:"/sbt-github/docs/organization",draft:!1,unlisted:!1,editUrl:"https://github.com/alejandrohdezma/sbt-github/edit/main/website/docs/organization.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Integration with sbt-mdoc",permalink:"/sbt-github/docs/integrations/sbt-mdoc"}},d={},l=[{value:"Download owner information if it doesn&#39;t have an organization",id:"download-owner-information-if-it-doesnt-have-an-organization",level:2},{value:"Complete override of the organization used",id:"complete-override-of-the-organization-used",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"organization",children:"Organization"}),"\n",(0,i.jsxs)(n.p,{children:["By default, this plugin will populate ",(0,i.jsx)(n.code,{children:"organizationName"}),", ",(0,i.jsx)(n.code,{children:"organizationEmail"})," and ",(0,i.jsx)(n.code,{children:"organizationHomepage"})," with information from repository's organization. However, there are other scenarios..."]}),"\n",(0,i.jsx)(n.h2,{id:"download-owner-information-if-it-doesnt-have-an-organization",children:"Download owner information if it doesn't have an organization"}),"\n",(0,i.jsxs)(n.p,{children:["In case the repository doesn't belong to an organization those settings will be populated with the owner's information. You can disable this functionality by setting ",(0,i.jsx)(n.code,{children:"populateOrganizationWithOwner"})," to ",(0,i.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"ThisBuild / populateOrganizationWithOwner := false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"complete-override-of-the-organization-used",children:"Complete override of the organization used"}),"\n",(0,i.jsxs)(n.p,{children:['In case the repository\'s organization is not the one that should be used, in case of repositories under "general" organizations like ',(0,i.jsx)(n.a,{href:"https://github.com/sbt",children:"sbt"})," or companies with multiple Github organizations, you can use the ",(0,i.jsx)(n.code,{children:"githubOrganization"})," setting to completely override the organization information. Just add the following code to your ",(0,i.jsx)(n.code,{children:"build.sbt"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'ThisBuild / githubOrganization := "my-organization"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>s});var i=o(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);